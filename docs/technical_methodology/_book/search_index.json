[["index.html", "Economics Methodology 1 Welcome!", " Economics Methodology Lorae Stojanovic 2024-07-15 1 Welcome! The purpose of this document is to explain, in depth, how the FIM works. It is intended to encapsulate the technical elements of the project arising from the programming design as well as the economic design. Chapter 1 documents the sources of data. Chapter 2 documents how the FIM is calculated. Chapter 3 documents how the UI interface is constructed. Chapter 4 describes the economic intuition for the FIM. "],["data-sources.html", "2 Data Sources 2.1 Data sources 2.2 Code walk-through 2.3 Combining &amp; wrangling 2.4 The clean data", " 2 Data Sources 2.1 Data sources We will have to figure this section out. We draw from BEA, CBO, haver, etc. But we will need a flow chart of all the scripts, all the dependencies, and explain why each source is used for each item. When do we overwrite history? We’ll probably have one sub section for each source, like: The FIM draws from several sources of data each time it runs. It uses the BEA’s National Accounts data, accessed through Haver, to get history. It uses our own predictions for the forecast period. And it uses CBO for past and future potential GDP and GDP predictions. 2.2 Code walk-through Let’s get nitty-gritty into the code. When the FIM runs, it starts with some messy initialization. It loads packages and defines some variables related to dates. This code should be made self-contained and put into its own script. But I (Lorae) haven’t gotten to that yet. Note that this code is important and should be handled carefully. For example, variables like last_month_year and month_year are used several times in code that follows. When refactoring this section, tread lightly and test carefully. Sys.setenv(TZ = &#39;UTC&#39;) # Set the default time zone to UTC (Coordinated Universal Time) librarian::shelf(tidyverse, tsibble, lubridate, glue, TimTeaFan/dplyover, zoo, TTR, fs, gt, openxlsx, snakecase, rlang, BrookingsInstitution/ggbrookings) # Load packages devtools::load_all() # Load all functions in package options(digits = 4) # Limit number of digits options(scipen = 20)# Turn off scientific notation under 20 digits #are we running this after a cbo baseline and pre-bea update? post_cbo_baseline&lt;- FALSE # Set the value of &#39;month_year&#39; to the current month and year (in the format &quot;mm-yyyy&quot;) month_year &lt;- glue(&#39;{format.Date(today() - 7, &quot;%m&quot;)}-{year(today())}&#39;) print(month_year) # Calculate the current date minus 7 days current_date &lt;- today() - dweeks(1) # Calculate the previous month date, handling wraparound (i.e. previous # month to January (&quot;01&quot;) is December (&quot;12&quot;), not month &quot;0&quot;) last_month_date &lt;- current_date %m-% months(1) # Extract and format the month as a two-digit string last_month_2digit &lt;- sprintf(&quot;%02d&quot;, month(last_month_date)) # Extract the year from the last_month_date last_year &lt;- year(last_month_date) # Create last_month_year string for file naming last_month_year &lt;- glue(&#39;{last_month_2digit}-{last_year}&#39;) print(last_month_year) This next section of code primarily serves to define empty folders that will be populated upon running the FIM. #setting our reference period to be the post-cbo files if we&#39;ve already produced fim output incorporating the cbo update if(file.exists(glue(&#39;results/{month_year}-post-cbo&#39;))){ last_month_year&lt;- glue(&#39;{month_year}-post-cbo&#39;) } # Create updatglibe folders update_in_progress &lt;- TRUE #set this to false if you&#39;re not running the code for a new month if(update_in_progress == TRUE){ dir_create(glue(&#39;results/{month_year}&#39;)) # Create folder for current update in the results directory dir_create(glue(&#39;results/{month_year}/input_data&#39;)) # Folder to store forecast sheet from current update dir_create(glue(&#39;results/{month_year}/beta&#39;)) # Copy the file &#39;forecast.xlsx&#39; from the &#39;data&#39; directory to the &#39;input_data&#39; directory # This is the copy we keep for the current update file_copy(path = &#39;data/forecast.xlsx&#39;, new_path = glue(&#39;results/{month_year}/input_data/forecast_{month_year}.xlsx&#39;), overwrite = TRUE) } We’ll probably have one sub section for each source, like: 2.2.1 CBO stuff here. Which reports do we use? Budget? Economic? How do we input their data into the FIM? 2.2.2 BEA Same questions as above 2.2.3 Haver Discuss Haver package, etc. 2.3 Combining &amp; wrangling I have no idea how this is done, and we will have to refactor this section in depth. 2.4 The clean data We use the “projections” data frame (at least for now) in the remainder of the code. In its current refactored state in the fiscal_impact_BETA script, we select columns of interest from the lonnngggg “projections” data frame and use those as we calculate the FIM. "],["data-processing.html", "3 Data Processing 3.1 Input data 3.2 The equations that actually fovern the FIM", " 3 Data Processing 3.1 Input data The FIM has many inputs. But when we run the FIM, we typically take into account 23 main data series, which are found in the “forecast” section of the sheet. “An image of the ‘forecast’ page of the ‘forecast.xlsx’ workbook.” 3.2 The equations that actually fovern the FIM Your best source for data processing steps as they stand (in late June 2024) is to look at docs/variables_tracker. It maps out how each input leads to each output and what operations are done along the way. I’m using it to completely refactor the computation section of the FIM. We’ll have to write up this section later. 3.2.1 MPC subsection There’s a lot of cool documentation about how we calculate MPCs using matrices in the src/mpc_lorae.R file. Please refer to that to write about how the economic concept of MPCs translates into code. 3.2.2 minus neutral subsection I’m sure we’ll have stuff about our reasoning here 3.2.3 other stuff section more content "],["ui-presentation.html", "4 UI Presentation", " 4 UI Presentation This chapter will focus on how the results are presented in a user-friendly UI. We will use various R packages such as shiny to create interactive dashboards. "],["economics-methodology.html", "5 Economics Methodology", " 5 Economics Methodology In this chapter, we will delve into the economics behind the FIM, including the theoretical foundations and the specific methodologies used to calculate various economic impacts. 5.0.1 Marginal Propensities to Consume 5.0.1.1 Calculation Explain how the marginal propensities to consume are calculated using matrices and provide relevant examples. # Example code for calculating MPC series &lt;- c(100, 200, 300, 400) 1+1 ## [1] 2 testing "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
